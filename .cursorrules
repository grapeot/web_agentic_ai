# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python3 venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using Anthropic API tool calling:
  - Tool results should be formatted with `tool_use_id` (not `tool_call_id`) and `content` (not `output`)
  - Tool results should be included as content blocks in a user message, not as a separate `tool_outputs` parameter
  - Assistant messages containing `tool_use` blocks must be followed by user messages with matching `tool_result` blocks
  - Preserve the complete response structure in conversation history, not just the extracted text
- In JavaScript class implementations, avoid using method names as property names to prevent naming conflicts. For example, don't use `this.isAutoExecutingTools = false` when you have a method called `isAutoExecutingTools()`. Use a different property name like `this.autoExecutingTools` instead.
- When rendering chat messages:
  - Use `innerHTML` instead of `textContent` when you want to render Markdown or HTML content 
  - Track processed message IDs to avoid duplicating messages during polling operations
  - Include proper handling of image elements in Markdown (error handling, responsive design)

# Scratchpad

## JavaScript Refactoring Task

Task: Refactor the large main.js file into modular components to improve maintainability and organization.

### Current Issues
- Single file with ~1000 lines of code
- Multiple responsibilities mixed together
- Difficult to maintain and extend

### Refactoring Plan

[X] 0. 设置测试基础架构
   [X] 创建Jest测试配置
   [X] 设置JSDOM环境
   [X] 编写基本功能测试
   [X] 创建测试运行脚本
   [X] 添加项目README

[X] 1. 创建模块结构
   [X] 创建目录结构
   [X] 创建模块文件

[X] 2. 拆分代码到模块
   [X] 创建config.js：配置设置
   [X] 创建api.js：API交互
   [X] 创建state.js：状态管理
   [X] 创建ui.js：UI渲染
   [X] 创建events.js：事件处理
   [X] 创建tools.js：工具功能
   [X] 创建filePreview.js：文件预览
   [X] 创建utils.js：辅助函数

[X] 3. 建立main.js框架
   [X] 创建基本入口点结构
   [X] 导入所有模块
   [X] 添加初始化函数
   
[X] 4. 修复关键bug
   [X] 修复state模块的命名冲突
   [X] 确保ui模块正确导入state
   [X] 修复工具折叠功能
   [X] 修复消息重复问题
   [X] 修复Markdown图片渲染问题

[ ] 5. 运行测试验证功能
   [ ] 确保初始化测试通过
   [ ] 确保消息发送测试通过
   [ ] 确保工具调用测试通过
   [ ] 确保清除聊天测试通过
   [ ] 确保设置调整测试通过

[ ] 6. 重构main.js
   [ ] 移除临时实现
   [ ] 完全使用模块化方法
   [ ] 保持功能一致性

[ ] 7. 添加文档
   [ ] 为函数添加JSDoc注释
   [ ] 补充模块架构说明

### 当前状态
- 已修复state.js中isAutoExecutingTools()方法的命名冲突
- 已修复ui.js中对state的正确导入
- 已修复工具和结果的默认折叠显示
- 已修复消息轮询时的重复问题
- 已修复Markdown中图片链接不显示的问题
- 下一步: 测试应用功能并修复任何剩余问题